#!/usr/bin/env ruby
# encoding: utf-8
# Generated by Walrus <http://walrus.wincent.com/>

begin
  require 'rubygems'
rescue LoadError
  # installing Walrus via RubyGems is recommended
  # otherwise Walrus must be installed in the RUBYLIB load path
end

require 'walrus/document'
require File.expand_path('../../../buildtools/help/basic', File.dirname(__FILE__))

module Walrus
  class Grammar
    class LearnAbout < Basic
      def template_body
        super # (invoked automatically due to Extends directive)
        # Comment: Created by Wincent Colaiuta on 21 April 2007.
        # Comment: Copyright 2007 Wincent Colaiuta
        # Comment: $Id: /mirrors/Hextrapolate/trunk/en.lproj/help/example_basic.tmpl.txt 6761 2007-04-14T11:59:53.204092Z wincent  $
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText
        # Comment:#############################################################################
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText (continued)
      end

      def setup
        accumulate('  ') # RawText
        # Include (start): ../settings.txt:
                # Comment: settings.tmpl
                # Comment: A template for application-wide default settings
                # Comment: buildtools help templates
                # Comment:
                # Comment: Copyright 2006-2010 Wincent Colaiuta. All rights reserved.
                # Comment:
                # Comment: Redistribution and use in source and binary forms, with or without
                # Comment: modification, are permitted provided that the following conditions are met:
                # Comment:
                # Comment: 1. Redistributions of source code must retain the above copyright notice,
                # Comment:    this list of conditions and the following disclaimer.
                # Comment: 2. Redistributions in binary form must reproduce the above copyright notice,
                # Comment:    this list of conditions and the following disclaimer in the documentation
                # Comment:    and/or other materials provided with the distribution.
                # Comment:
                # Comment: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                # Comment: AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                # Comment: IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
                # Comment: ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
                # Comment: LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
                # Comment: CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
                # Comment: SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
                # Comment: INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
                # Comment: CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                # Comment: ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                # Comment: POSSIBILITY OF SUCH DAMAGE.
                accumulate('' + "\n") # RawText
                # Comment:
                # Comment: appliction-wide default settings go in here
                # Comment:
                accumulate('' + "\n") # RawText
                set_value("book_id", instance_eval { 'Hextrapolate Help' }) # Set directive
                set_value("book_icon", instance_eval { 'Hextrapolate Help/gfx/icon16.png' }) # Set directive
                set_value("author", instance_eval { 'Wincent Colaiuta' }) # Set directive
                set_value("author_email", instance_eval { 'win@wincent.com' }) # Set directive
                set_value("copyright", instance_eval { 'Copyright 2007-2010 Wincent Coliauta' }) # Set directive
                accumulate('' + "\n") # RawText
                # Comment:
                # Comment: the page_title should be overridden on a per-page basis
                # Comment:
                accumulate('' + "\n") # RawText
                set_value("page_title", instance_eval { 'Help' }) # Set directive
        accumulate('  ') # RawText
        set_value("page_title", instance_eval { 'Learn about Hextrapolate' }) # Set directive
        accumulate('  ') # RawText
        set_value("tag", instance_eval { 'learn_about' }) # Set directive
        accumulate('  ') # RawText
        # Comment:#set $abstract    = "if different from page title"
        accumulate('' + "\n") # RawText
        accumulate('  ') # RawText (continued)
        # Comment:$see_also($link_to('base2', 'other text'))
        accumulate('' + "\n") # RawText
        accumulate('  ') # RawText (continued)
        # Comment:$see_also($link_to_category('base2', 'other text'))
        accumulate('' + "\n") # RawText
      end
      
      def content
        accumulate('' + "\n") # RawText
        accumulate('Hextrapolate is a conversion tool that converts numbers in any base &mdash; from base 2 (binary) right through to base 36 &mdash; into any other base. It can also convert to and from string representations of numbers using different, user-selectable text encodings (ASCII, UTF-8 and UTF-16).' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('Humans are most accustomed to thinking and working in base 10 (decimal) but computers regularly employ other formats, especially base 2 (binary), base 8 (octal) and base 16 (hexadecimal). Hextrapolate is useful not only for programmers but for any computer user that needs to convert numbers from one base into another.' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('<div class="feature">' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('h2. Start typing<br>' + "\n") # RawText (continued)
        accumulate('<img src="../gfx/tool-tips.png" width="171" height="105" alt="Tool-tips">' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('To get started just begin typing in one of Hextrapolate\'s input fields. As you type each new digit or character all of the other fields will update in realtime to show the equivalent value expressed in other bases and formats. If you try to type a digit that is not valid for a given base Hextrapolate will show you a tool-tip indicating which digits are allowed. There are no arbitrary limits to the size of numbers that you can convert using Hextrapolate; even numbers containing thousands of digits and more can be converted.' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'bases')
        accumulate('' + "\n") # RawText
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'let_me_type', 'Getting feedback on errors')
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText (continued)
        accumulate('</div>' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('<div class="feature">' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('h2. Make choices<br>' + "\n") # RawText (continued)
        accumulate('<img src="../gfx/more-choices.png" width="129" height="110" alt="More choices">' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('Preset fields are provided for the most common bases used in computing (binary, octal, decimal and hexadecimal). In addition to these fields Hextrapolate provides a number of custom fields which you can use to perform exotic conversions (for example, from Base 13 to Base 29) and encodings to and from textual string representations.' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'bases')
        accumulate('' + "\n") # RawText
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'text_encodings')
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText (continued)
        accumulate('</div>' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('<div class="feature">' + "\n") # RawText (continued)
        accumulate('  ' + "\n") # RawText (continued)
        accumulate('h2. Get help when you need it<br>' + "\n") # RawText (continued)
        accumulate('<img src="../gfx/integrated-help.png" width="171" height="105" alt="Integrated help">' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('The extensive help documentation that you\'re reading right now is always available from the Help menu; the help is embedded inside the application itself so you don\'t need to be connected to the Internet to read it. The Hextrapolate Help is modelled to look just like the familiar and easy-to-use help provided by Apple with its own applications, and you can browse or search through it from within the Mac OS X Help Viewer.' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'troubleshooting_tips')
        accumulate('' + "\n") # RawText
        accumulate('* ') # RawText (continued)
        lookup_and_accumulate_placeholder(:link_to, 'full_index')
        accumulate('' + "\n") # RawText
        accumulate('' + "\n") # RawText (continued)
        accumulate('</div>' + "\n") # RawText (continued)
        accumulate('' + "\n") # RawText (continued)
      end
      
      if __FILE__ == $0   # if run from the command line
        new.run           # same as "walrus run __FILE__"
      else                # if loaded and evaled
        new.fill          # return filled content
      end
    end # LearnAbout
  end # Grammar
end # Walrus
